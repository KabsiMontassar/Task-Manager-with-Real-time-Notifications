name: Combined CI/CD Pipeline

on:
  push:
    branches:
      - montassar  
  pull_request:
    branches:
      - main  

env:
  REGISTRY: ghcr.io/kabsimontassar  
  IMAGE_TAG: ${{ github.sha }}

jobs:
  install-dependencies:
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: |
            api-gateway/node_modules
            frontend/node_modules
            task-service/node_modules
            user-service/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Gateway dependencies
        run: |
          cd api-gateway
          npm install
          npm install ts-node mocha --save-dev
          npm install prettier --save-dev

      - name: Install Frontend dependencies
        run: |
          cd frontend
          npm install
          npm install @playwright/test --save-dev
          npm install prettier --save-dev

      - name: Install Task Service dependencies
        run: |
          cd task-service
          npm install
          npm install ts-node mocha --save-dev
          npm install prettier --save-dev

      - name: Install User Service dependencies
        run: |
          cd user-service
          npm install
          npm install ts-node mocha --save-dev
          npm install prettier --save-dev

  format:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Prettier
        run: |
          cd frontend && npx prettier --write . 
          cd ../api-gateway && npx prettier --write . 
          cd ../task-service && npx prettier --write . 
          cd ../user-service && npx prettier --write .

  run-tests:
    runs-on: ubuntu-latest
    needs: install-dependencies
    strategy:
      fail-fast: true
      matrix:
        service: [frontend, api-gateway, task-service, user-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Tests for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          if [ "${{ matrix.service }}" == "frontend" ]; then
            npx playwright test || echo "Playwright tests failed"
          else
            npx mocha --require ts-node/register 'test/**/*.spec.ts' --recursive || echo "Mocha tests failed"
          fi

  security-analysis:
    runs-on: ubuntu-latest
    needs: [format, run-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONARTOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=TaskManager \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN

  build-and-push-docker-images:
    runs-on: ubuntu-latest
    needs: security-analysis
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}  

      - name: Build and push Gateway image
        run: |
          cd api-gateway
          docker buildx build --cache-from=type=registry,ref=$REGISTRY/api-gateway:cache \
                              --cache-to=type=registry,ref=$REGISTRY/api-gateway:cache,mode=max \
                              -t $REGISTRY/api-gateway:$IMAGE_TAG -t $REGISTRY/api-gateway:latest --push .

      - name: Build and push Frontend image
        run: |
          cd frontend
          docker buildx build --cache-from=type=registry,ref=$REGISTRY/frontend:cache \
                              --cache-to=type=registry,ref=$REGISTRY/frontend:cache,mode=max \
                              -t $REGISTRY/frontend:$IMAGE_TAG -t $REGISTRY/frontend:latest --push .

      - name: Build and push Task Service image
        run: |
          cd task-service
          docker buildx build --cache-from=type=registry,ref=$REGISTRY/task-service:cache \
                              --cache-to=type=registry,ref=$REGISTRY/task-service:cache,mode=max \
                              -t $REGISTRY/task-service:$IMAGE_TAG -t $REGISTRY/task-service:latest --push .

      - name: Build and push User Service image
        run: |
          cd user-service
          docker buildx build --cache-from=type=registry,ref=$REGISTRY/user-service:cache \
                              --cache-to=type=registry,ref=$REGISTRY/user-service:cache,mode=max \
                              -t $REGISTRY/user-service:$IMAGE_TAG -t $REGISTRY/user-service:latest --push .
